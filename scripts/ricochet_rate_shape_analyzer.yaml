# Configuration script for a 2-dimensional rate+shape analysis
preprocessing:
  # Inputs for shape_fakedata_generator.py
  generate_shapes: True
    # Optional (Default=True): Whether shapes of signals and backgrounds should be generated
  generate_fake_data: True
    # Optional (Default=True): Whether fake data should be generated
  indep_vars:
      # Info about the independent variables that signals and backgrounds can depend on
    - name: "Time"
        # Optional (Default='x_i'): Printed in debugging output and optional stored info
      bins: 30
        # Optional (Default=30): Number of bins to use for this independent variable
      lower_bound: 0
      upper_bound: 365
        # Lower and upper bounds to use when binning shapes for this variable
      renormalization: "initial"
        # Optional (Default="none"): How the binned shapes should be normalized. Options are-
        #   - "none": Integrate the given function over the width of each bin and store
        #   - "initial": Before integrating, renormalize the function so its value at
        #                lower_bound is 1. (Eg used for time dependent signals)
        #   - "integral": Renormalize such that the sum over all bins is 1. (Eg spectrum)
    - name: "Er"
      bins: 10
      lower_bound: 100
      upper_bound: 1000
      renormalization: "integral"
  additional_stan_input_file: "data/additional_data.out"
    # Required if generate_shapes=True: File for storing additional info for stan
    #                             when generating shapes, such as the number of bins
  # Parameters for generating signal shapes
  signal_shape_output_file: "data/signal_shapes.root"
  signal_shape_output_type: "root"
    # location and file type that will be used to store the signal shapes
  signals:
    - name: "Coherent Neutrino Scattering"
        # Optional (Default='Signal_i'): Printed in debugging output and optional stored info
      fake_data_weight: 1
        # Optional (Default=1): Relative weight of this signal (or background) when generating fake data
      regenerate: True
        # Optional (Default="True"): Whether or not the shapes of all signals should be regenerated
      dimension_params:
        # give the function for this signal for each independent variable
        - type: "py_fcn"
            # Required: How the shape is stored. Options are "py_fcn", "data_files", or "stan_fcn"
          location: "ric_functions/"
            # Required only if type=="py_fcn": Path to the directory where the py file with the shape is stored
          module: "ric_shapefunctions"
            # Required only if type=="py_fcn": Name of the module where the function is located
          fcn_name: "cns_time"
            # Required only if type=="py_fcn" or "stan_fcn": Name of the function to be accessed.
          samples_per_bin: 10
            # Optional (Default=10): If type=="py_fcn" or "stan_fcn", the integral of the function is
            #          calculated using the rectangle method. smaples_per_bin is he number of samples
            #          to take, evenly spaced, over the width of each bin
#          params: [0.6]
            # Optional (Default=[]): Parameters beyond the inependent x variable that the fcn takes
          tree_name: "cns_time"
            # Required: Name of the tree stored in the output root file
          x_branch_name: "time"
            # Required: Name of the branch with the x points in the output root file
          y_branch_name: "cns"
            # Required: Name of the branch with the y points in the output root file
        - type: "data_files"
          data_file_type: "csv"
            # Optional: Currently only csv files are supported
          x_data_location: "ric_functions/ric_cns_spectrum/recoilEnergies.csv"
          y_data_location: "ric_functions/ric_cns_spectrum/differentialRates.csv"
            # Required only if type=="data_file": Paths to the data files
          tree_name: "cns_Er"
          x_branch_name: "Er"
          y_branch_name: "cns"
  # The same parameters are used for backgrounds and for signals
  background_shape_output_file: "data/background_shapes.root"
  background_shape_output_type: "root"
  backgrounds:
    - name: "neutron"
      fake_data_weight: 1.0
      regenerate: True
      dimension_params:
        - type: "py_fcn"
          location: "ric_functions/"
          module: "ric_shapefunctions"
          fcn_name: "flat"
          samples_per_bin: 10
#          params: []
          tree_name: "neutron_time"
          x_branch_name: "time"
          y_branch_name: "neutrons"
        - type: "py_fcn"
          location: "ric_functions/"
          module: "ric_shapefunctions"
          fcn_name: "flat"
          samples_per_bin: 10
#          params: []
          tree_name: "neutron_Er"
          x_branch_name: "Er"
          y_branch_name: "neutrons"
  fake_data_settings:
    # Required if generate_fake_data==True: Settings for fake data
    fake_signal_magnitude: 5
      # Required: Total magnitude of all signals combined when generating fake data
    fake_background_magnitude: 14
      # Required: Total magnitude of all backgrounds combined
    fake_poisson_redistribution: True
      # Optional (Default=True): Whether expected counts should be poisson distributed around actual
    fake_gaussian_redistribution: True
      # Optional (Default=False): Whether the total in each bin should be gaussian distributed
    bin_gauss_sigma_variation: 0.05
      # The amount that total expected counts should be gaussian distributed by in each bin.
      # Given as a fraction of the total expected counts
    fake_data_output_file: "data/fake_data.out"
    fake_data_output_tree: "fake_data"
#    fake_data_output_type: "R"
  optional_output_settings:
#    print_debug_statements: True
      # Optional (Default=False): Whether statements about the progress should be printed to the terminal
    store_info_text: True
      # Optional (Default=False): Whether shape_info.txt and fake_data_info.txt should be stored
    store_info_plots: True
      # Optional (Default=False): Whether plots of the signal/background shapes and fake data should be stored
    info_output_directory: 'data/diagnostics/'
      # Required if store_info_text or store_info_plots are True: Directory to store a record of shape and
      # fake data generation.

# ALL OF THE FOLLOWING NEEDS TO BE EDITED WHEN I IMPLEMENT THE MODEL
morpho:
  do_stan: False
  do_postprocessing: False
  do_plots: False
stan:
  # Name of the model
  name: count_analyzer,
  # Model, associated functions, cache folder
  model:
    file: "./Ricochet/models/count_analyzer.stan"
    function_file:
# I DON'T KNOW IF THIS FORMAT IS RIGHT FOR THE FUNCTION FILE
      - name: "ricochet"
        file: "../functions/ricochet.functions"
  cache: "./Ricochet/cache"
  data:
    files:
      - name: "./Ricochet/results/count_additionalData.out"
        format: "R" 
      - name: "./Ricochet/results/count_generator_reduced.root"
        format: "root"
        tree: "rate_shape"
        branches:
          - name: "time"
            stan_alias: "time"
          - name: "time_signal_binned"
            stan_alias: "time_signal_binned"
      - name: "./Ricochet/results/count_generator_reduced_fake.root"
        format: "root"
        tree: "counts"
        branches:
          - name: "x_axis_data"
            stan_alias: "time_data"
#            "parameters": [
#                           {
#                           "startTime": 0,
#                           "endTime": 365,
#                           "signal_lb":0,
#                           "signal_ub":100,
#                           "background_lb":0,
#                           "background_ub":100,
#                           "nBackgrounds":1,
#                           "decay_param_lb":0,
#                           "decay_param_ub":1
#                           }
#                           ]
#        },
#        
#        "run": {
#            "algorithm": "NUTS",
#            "iter": 24000,
#            "warmup" : 20000,
#            "chain": 6},
#        
#        
#        "sample": "./Ricochet/results/ricochet_counts_analyzer.out",
#        
#        "output":
#        {
#            "name" : "./Ricochet/results/ricochet_counts_analyzer",
#            "format": "root",
#            "tree" : "analysis_parameters",
#            "save_cache_name": "./Ricochet/results/cache_name_file.txt", 
#            "fit": "./Ricochet/results/analysis_fit.pkl", 
#            "branches": [
#                {"variable": "signal_rate","root_alias": "signal_rate"},                { "variable": "background_rate","root_alias": "background_rate"},
#                { "variable": "lp__","root_alias": "lp__"},
#                      ]
#        }
#        
#    },
#
#"postprocessing":
#  {
#    "which_pp":[
#      {
#      }
#   ]
#   },
#
#"plot":
#    {
#      "which_plot":[
#        {
#        "method_name": "rate_params",
#        "module_name": "rate_params",
#        "read_cache_name": "./Ricochet/results/cache_name_file.txt",
#        "input_fit_name": "./Ricochet/results/analysis_fit.pkl",
#        "output_path": "./Ricochet/results/",
#        "output_format": "pdf",
#        "plotting_options": ["contours"],
#        "data": {"alpha":"alpha","background_rate_mean":"background_rate_mean"}
#        }
#    ]
#    }
#}
